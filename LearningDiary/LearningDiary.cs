using System;
using System.Collections.Generic;

namespace LearningDiary
{
    class LearningDiary
    {

        private Dictionary<int, Topic> PastLearnings;
        private Dictionary<int, Task> TasksWithoutTopic;
        private HashSet<int> TaskIdList;
        private object PersistentStorage;
        public LearningDiary(object PersistentStorage)
        {
            this.PastLearnings = new Dictionary<int, Topic>();
            this.TasksWithoutTopic = new Dictionary<int, Task>();
            this.TaskIdList = new HashSet<int>();
        }

        public LearningDiary()
        {
            this.PastLearnings = new Dictionary<int, Topic>();
            this.TasksWithoutTopic = new Dictionary<int, Task>();
            this.TaskIdList = new HashSet<int>();
        }

        private void LoadAllTopicsFromStorage()
        {
        }

        private void SaveAllTopicsToStorage()
        {
        }

        //overloading vai oma metodi AddTopicToDiaryWithAutoGeneratedId?
        //autogenerate taskID
        public void AddTopicToDiary(string title, string description, double estimatedTimeToMaster, string source)
        {
            //Who keeps track of the ID generation, get Unique Id from storage?
            int topicId = PastLearnings.Count;

            AddTopicToDiary(topicId, title, description, estimatedTimeToMaster, source);

        }

        public void AddTopicToDiary(int topicId, string title, string description, double estimatedTimeToMaster, string source)
        {
            //toistoa?
            if (this.PastLearnings.ContainsKey(topicId))
            {
                throw new ArgumentException($"Unique constrain violation, topicId = {topicId} not unique");
            }

            else
            {
                Topic newTopic = new Topic(topicId, title, description, estimatedTimeToMaster, source);
                this.PastLearnings.Add(topicId, newTopic);
            }

        }

        //autogenerate taskID
        public void AddTaskToTopic(int topicId, string title, string description, string notes, DateTime deadline)
        {
            int taskId = this.TaskIdList.Count;
            AddTaskToTopic(taskId, topicId, title, description, notes, deadline);
        }


        public void AddTaskToTopic(int taskId, int topicId, string title, string description, string notes, DateTime deadline)
        {
            //toistoa?
            if (this.TaskIdList.Contains(taskId))
            {
                throw new ArgumentException($"Unique constrain violation, TaskId = {taskId} not unique");
            }

            else if(this.PastLearnings.ContainsKey(topicId))
            {
                Task newTask = new Task(taskId, topicId, title, description, notes, deadline);
                this.PastLearnings[topicId].TasksRelatedToTopic.Add(newTask);
                this.TaskIdList.Add(taskId);
            }
            else
            {
                throw new ArgumentException($"Unique constrain violation, TaskId = {topicId} not unique");
            }
        }

        //autogenerate taskID
        public void AddTaskWithoutTopic(string title, string description, string notes, DateTime deadline)
        {
            int taskId = this.TaskIdList.Count;
            AddTaskWithoutTopic(taskId, title, description, notes, deadline);
        }

        public void AddTaskWithoutTopic(int taskId, string title, string description, string notes, DateTime deadline)
        {
            if (!this.TaskIdList.Contains(taskId))
            {
                throw new ArgumentException($"Unique constrain violation, TaskId = {taskId} not unique");
            }

            else
            {
                Task newTask = new Task(taskId, title, description, notes, deadline);
                this.TasksWithoutTopic.Add(taskId, newTask);
                this.TaskIdList.Add(taskId);
            }
        }

        public void StartTopicById(int topicId)
        {
            if (this.PastLearnings.ContainsKey(topicId))
            {
                this.PastLearnings[topicId].StartLearning();
            }
            else
            {
                throw new ArgumentException($"Task ID not found, Topicid = {topicId}");
            }
        }

        public void FinishTopicById(int topicId)
        {
            if (this.PastLearnings.ContainsKey(topicId))
            {
                this.PastLearnings[topicId].FinishLearning();
            }
            else
            {

            throw new ArgumentException($"Topic ID not found, Topicid = {topicId}");
            }
        }

        public void FinishTaskById(int taskId)
        {
            if (this.TasksWithoutTopic.ContainsKey(taskId))
            {
                this.TasksWithoutTopic[taskId].FinishTask();
            }
            else
            {
            throw new ArgumentException($"Task ID not found, taskid = {taskId}");

            }
        }

        public Topic GetTopicById(int topicId)
        {
            if (this.PastLearnings.ContainsKey(topicId))
            {
                return this.PastLearnings[topicId];
            }

            else
            {
                throw new ArgumentException($"Topic ID not found, Topicid = {topicId}");
            }
        }
        public List<Topic> GetAllTopics()
        {
            return new List<Topic>(this.PastLearnings.Values);
        }

        public List<Task> GetAllTasksRelatedToTopic(int topicId)
        {
            return this.PastLearnings[topicId].TasksRelatedToTopic;
        }
    }
}
